{"version":3,"sources":["components/About.tsx","components/Landing.tsx","components/Contact.tsx","components/Projects.tsx","components/WorkExperience.tsx","components/Main.tsx","App.tsx","serviceWorker.js","index.js"],"names":["About","Landing","style","width","margin","className","col","Contact","Projects","Experience","Main","exact","path","component","App","WEB_NAV","to","title","scroll","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mQAEe,SAASA,IACtB,OACE,6BAAK,yCCDM,SAASC,IACtB,OACE,yBAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACnC,kBAAC,OAAD,CAAMC,UAAU,gBACd,kBAAC,OAAD,CAAMC,IAAM,OCLL,SAASC,IACtB,OACE,6BAAK,2CCFM,SAASC,IACtB,OACE,6BAAK,yCCFM,SAASC,IACtB,OACE,6BAAK,gDCIM,SAASC,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAYZ,IAClC,kBAAC,IAAD,CAAOW,KAAK,SAASC,UAAYb,IACjC,kBAAC,IAAD,CAAOY,KAAK,cAAcC,UAAYJ,IACtC,kBAAC,IAAD,CAAOG,KAAK,YAAYC,UAAYL,IACpC,kBAAC,IAAD,CAAOI,KAAK,WAAWC,UAAYN,KC8B1BO,MArCf,WACE,IAMMC,EACJ,kBAAC,aAAD,KACE,kBAAC,IAAD,CAAMC,GAAG,UARC,SASV,kBAAC,IAAD,CAAMA,GAAG,eARW,mBASpB,kBAAC,IAAD,CAAMA,GAAG,aARI,YASb,kBAAC,IAAD,CAAMA,GAAG,YARM,WASf,kBAAC,IAAD,CAAMA,GAAG,KARE,WAYf,OACE,yBAAKX,UAAU,OACb,yBAAKA,UAAU,oBACb,kBAAC,SAAD,KACE,kBAAC,SAAD,CAAQA,UAAW,eAAgBY,MAAM,UAAUC,QAAM,GACrDH,GAEJ,kBAAC,SAAD,CAAQE,MAAM,SACVF,GAEJ,kBAAC,UAAD,KACE,yBAAKV,UAAU,iBACf,kBAACK,EAAD,WCzBQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6d9f00f.chunk.js","sourcesContent":["import React from 'react';\n\nexport default function About() {\n  return (\n    <div><h1>About Me</h1></div>\n  );\n}\n","import React from 'react';\nimport { Grid, Cell } from 'react-mdl';\n\nexport default function Landing() {\n  return (\n    <div style={{ width: '100%', margin: 'auto' }}>\n      <Grid className='landing-grid'>\n        <Cell col={ 12 } />\n      </Grid>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Contact() {\n  return (\n    <div><h1>Contact Me</h1></div>\n  );\n}\n","import React from 'react';\n\nexport default function Projects() {\n  return (\n    <div><h1>Projects</h1></div>\n  );\n}\n","import React from 'react';\n\nexport default function Experience() {\n  return (\n    <div><h1>Work Experience</h1></div>\n  );\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport About from './About';\nimport Landing from './Landing';\nimport Contact from './Contact';\nimport Projects from './Projects';\nimport Experience from \"./WorkExperience\";\n\nexport default function Main() {\n  return (\n    <Switch>\n      <Route exact path='/' component={ Landing } />\n      <Route path='/about' component={ About } />\n      <Route path='/experience' component={ Experience } />\n      <Route path='/projects' component={ Projects } />\n      <Route path='/contact' component={ Contact } />\n    </Switch>\n  );\n}\n","import React from 'react';\nimport {\n  Layout, Drawer, Navigation, Content, Header,\n} from 'react-mdl';\nimport './App.css';\nimport { Link } from 'react-router-dom';\nimport Main from './components/Main';\n\nfunction App() {\n  const ABOUT = 'About';\n  const WORK_EXPERIENCE = 'Work Experience';\n  const PROJECTS = 'Projects';\n  const CONTACT_ME = 'Contact';\n  const RESUME = 'Resume';\n\n  const WEB_NAV = (\n    <Navigation>\n      <Link to='/about'>{ABOUT}</Link>\n      <Link to='/experience'>{WORK_EXPERIENCE}</Link>\n      <Link to='/projects'>{PROJECTS}</Link>\n      <Link to='/contact'>{CONTACT_ME}</Link>\n      <Link to='#'>{RESUME}</Link>\n    </Navigation>\n  );\n\n  return (\n    <div className='App'>\n      <div className='demo-big-content'>\n        <Layout>\n          <Header className={'header-color'} title='Eddy Li' scroll>\n            { WEB_NAV }\n          </Header>\n          <Drawer title='Title'>\n            { WEB_NAV }\n          </Drawer>\n          <Content>\n            <div className='page-content' />\n            <Main />\n          </Content>\n        </Layout>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}